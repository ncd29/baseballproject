}
currSharerID = c(inMesLoop$SharerID[1])
currReceiverID = c(inMesLoop$receiver[1])
currTime = c(as.Date(inMesLoop$Time[1]))
inMesLoop$Label[1] = "First"
for (i in 2:length(inMesLoop)) {
currSharerID[i] = inMesLoop$SharerID[i]
CurrReceiverID[i] = inMesLoop$receiver[i]
CurrTime[i] = as.Date(inMesLoop$Time[i])
}
currSharerID = c(inMesLoop$SharerID[1])
currReceiverID = c(inMesLoop$receiver[1])
currTime = c(as.Date(inMesLoop$Time[1]))
inMesLoop$Label[1] = "First"
for (i in 2:length(inMesLoop)) {
currSharerID[i] = inMesLoop$SharerID[i]
currReceiverID[i] = inMesLoop$receiver[i]
currTime[i] = as.Date(inMesLoop$Time[i])
}
currSharerID
class(inMesLoop$SharerID)
inMesLoop$SharerID = as.character(inMesLoop$SharerID)
inMesLoop$ReceiverID = as.character(inMesLoop$ReceiverID)
inMesLoop$Time = as.Date(inMesLoop$Time)
currSharerID = c(inMesLoop$SharerID[1])
currReceiverID = c(inMesLoop$receiver[1])
currTime = c(as.Date(inMesLoop$Time[1]))
inMesLoop$Label[1] = "First"
for (i in 2:length(inMesLoop)) {
currSharerID[i] = inMesLoop$SharerID[i]
currReceiverID[i] = inMesLoop$receiver[i]
currTime[i] = as.Date(inMesLoop$Time[i])
}
currSharerID
dt = c(c(1,2),c(3,4))
dt
i = 2
validRows = inMesLoop[which(identical(inMesLoop$SharerID,inMesLoop$SharerID[i])&
identical(inMesLoop$receiver,inMesLoop$receiver[i]))]
vaildRows
validRows = inMesLoop[which(identical(inMesLoop$SharerID,inMesLoop$SharerID[i])&
identical(inMesLoop$receiver,inMesLoop$receiver[i]))]
validRows
a = c()
length(a)
a[1] = 1
a
is.null(validRows)
length(validRows)
length(colnames(validRows))
length(rownames(validRows))
for (i in 2:length(inMesLoop)) {
currSharerID[i] = inMesLoop$SharerID[i]
currReceiverID[i] = inMesLoop$receiver[i]
currTime[i] = as.Date(inMesLoop$Time[i])
acc = c()
for (j in 1:length(currSharerID)) {
validRow = inMesLoop[which(identical(inMesLoop$SharerID[j],inMesLoop$SharerID[i])&
identical(inMesLoop$receiver[j],inMesLoop$receiver[i]))]
if (length(rownames(validrows)) > 0) {
acc[length(acc) + 1] = validRow
}
}
# checks case if next UserID and ReceiverID are the same as before
#[i]%in%currSharerID
if (identical(currSharerID[i],currSharerID[i-1])&identical(currReceiverID[i],currReceiverID[i-1])) {
if (difftime(currTime[i],currTime[i-1]) > 10080) {
inMesLoop$Label = "FirstTime"
}
}
}
for (i in 2:length(inMesLoop)) {
currSharerID[i] = inMesLoop$SharerID[i]
currReceiverID[i] = inMesLoop$receiver[i]
currTime[i] = as.Date(inMesLoop$Time[i])
acc = c()
for (j in 1:length(currSharerID)) {
validRow = inMesLoop[which(identical(inMesLoop$SharerID[j],inMesLoop$SharerID[i])&
identical(inMesLoop$receiver[j],inMesLoop$receiver[i]))]
if (length(rownames(validRow)) > 0) {
acc[length(acc) + 1] = validRow
}
}
# checks case if next UserID and ReceiverID are the same as before
#[i]%in%currSharerID
if (identical(currSharerID[i],currSharerID[i-1])&identical(currReceiverID[i],currReceiverID[i-1])) {
if (difftime(currTime[i],currTime[i-1]) > 10080) {
inMesLoop$Label = "FirstTime"
}
}
}
warnings()
view(inMesLoop)
View(inMesLoop)
inMesLoop$SharerID = as.character(inMesLoop$SharerID)
inMesLoop$ReceiverID = as.character(inMesLoop$ReceiverID)
inMesLoop$Time = as.Date(inMesLoop$Time)
currSharerID = c(inMesLoop$SharerID[1])
currReceiverID = c(inMesLoop$receiver[1])
currTime = c(as.Date(inMesLoop$Time[1]))
inMesLoop$Label[1] = "FirstTime"
for (i in 2:length(inMesLoop)) {
currSharerID[i] = inMesLoop$SharerID[i]
currReceiverID[i] = inMesLoop$receiver[i]
currTime[i] = as.Date(inMesLoop$Time[i])
acc = c()
for (j in 1:length(currSharerID)) {
validRow = inMesLoop[which(identical(inMesLoop$SharerID[j],inMesLoop$SharerID[i])&
identical(inMesLoop$receiver[j],inMesLoop$receiver[i]))]
if (length(rownames(validRow)) > 0) {
acc[length(acc) + 1] = validRow
}
}
# checks case if next UserID and ReceiverID are the same as before
#[i]%in%currSharerID
if (identical(currSharerID[i],currSharerID[i-1])&identical(currReceiverID[i],currReceiverID[i-1])) {
if (difftime(currTime[i],currTime[i-1]) > 10080) {
inMesLoop$Label = "FirstTime"
}
}
}
View(inMesLoop)
warnings()
as.data.table(c())
a = as.data.table(c())
a[1] = c(1,2)
?"data.table"
colnames(a) = c(1,2)
dt = data.table(1,2)
dt
colnames(dt) = c(1,2)
colnames(dt) = c("One","Two")
dt
dt2 = dt[0]
dt2
inMesLoop$SharerID = as.character(inMesLoop$SharerID)
inMesLoop$ReceiverID = as.character(inMesLoop$ReceiverID)
inMesLoop$Time = as.Date(inMesLoop$Time)
currSharerID = c(inMesLoop$SharerID[1])
currReceiverID = c(inMesLoop$receiver[1])
currTime = c(as.Date(inMesLoop$Time[1]))
inMesLoop$Label[1] = "FirstTime"
for (i in 2:length(inMesLoop)) {
currSharerID[i] = inMesLoop$SharerID[i]
currReceiverID[i] = inMesLoop$receiver[i]
currTime[i] = as.Date(inMesLoop$Time[i])
acc = data.table("receiver","SharerID","Time","Day","ReceiverID","Label")
for (j in 1:length(currSharerID)) {
validRow = inMesLoop[which(identical(inMesLoop$SharerID[j],inMesLoop$SharerID[i])&
identical(inMesLoop$receiver[j],inMesLoop$receiver[i]))]
if (length(rownames(validRow)) > 0) {
acc[length(acc) + 1] = validRow
}
}
# checks case if next UserID and ReceiverID are the same as before
#[i]%in%currSharerID
if (identical(currSharerID[i],currSharerID[i-1])&identical(currReceiverID[i],currReceiverID[i-1])) {
if (difftime(currTime[i],currTime[i-1]) > 10080) {
inMesLoop$Label = "FirstTime"
}
}
}
dt
dt[2] = c(1,2)
inMesLoop$SharerID = as.character(inMesLoop$SharerID)
inMesLoop$ReceiverID = as.character(inMesLoop$ReceiverID)
inMesLoop$Time = as.Date(inMesLoop$Time)
currSharerID = c(inMesLoop$SharerID[1])
currReceiverID = c(inMesLoop$receiver[1])
currTime = c(as.Date(inMesLoop$Time[1]))
inMesLoop$Label[1] = "FirstTime"
for (i in 2:length(inMesLoop)) {
currSharerID[i] = inMesLoop$SharerID[i]
currReceiverID[i] = inMesLoop$receiver[i]
currTime[i] = as.Date(inMesLoop$Time[i])
acc = data.table("receiver","SharerID","Time","Day","ReceiverID","Label")
for (j in 1:length(currSharerID)) {
validRow = inMesLoop[which(identical(inMesLoop$SharerID[j],inMesLoop$SharerID[i])&
identical(inMesLoop$receiver[j],inMesLoop$receiver[i]))]
if (length(rownames(validRow)) > 0) {
rbind(acc,validRow)
}
}
# checks case if next UserID and ReceiverID are the same as before
#[i]%in%currSharerID
if (identical(currSharerID[i],currSharerID[i-1])&identical(currReceiverID[i],currReceiverID[i-1])) {
if (difftime(currTime[i],currTime[i-1]) > 10080) {
inMesLoop$Label = "FirstTime"
}
}
}
validRow
inMesLoop$SharerID = as.character(inMesLoop$SharerID)
inMesLoop$ReceiverID = as.character(inMesLoop$ReceiverID)
inMesLoop$Time = as.Date(inMesLoop$Time)
currSharerID = c(inMesLoop$SharerID[1])
currReceiverID = c(inMesLoop$receiver[1])
currTime = c(as.Date(inMesLoop$Time[1]))
inMesLoop$Label[1] = "FirstTime"
for (i in 2:length(inMesLoop)) {
currSharerID[i] = inMesLoop$SharerID[i]
currReceiverID[i] = inMesLoop$receiver[i]
currTime[i] = as.Date(inMesLoop$Time[i])
acc = data.table("receiver","SharerID","Time","Day","ReceiverID","Label")
for (j in 1:length(currSharerID)) {
validRow = inMesLoop[which(identical(inMesLoop$SharerID[j],inMesLoop$SharerID[i])&
identical(inMesLoop$receiver[j],inMesLoop$receiver[i]))]
if (length(rownames(validRow)) > 0) {
rbind(acc,validRow,fill = TRUE)
}
}
# checks case if next UserID and ReceiverID are the same as before
#[i]%in%currSharerID
if (identical(currSharerID[i],currSharerID[i-1])&identical(currReceiverID[i],currReceiverID[i-1])) {
if (difftime(currTime[i],currTime[i-1]) > 10080) {
inMesLoop$Label = "FirstTime"
}
}
}
a = inMesLoop[0]
a
inMesLoop$SharerID = as.character(inMesLoop$SharerID)
inMesLoop$ReceiverID = as.character(inMesLoop$ReceiverID)
inMesLoop$Time = as.Date(inMesLoop$Time)
currSharerID = c(inMesLoop$SharerID[1])
currReceiverID = c(inMesLoop$receiver[1])
currTime = c(as.Date(inMesLoop$Time[1]))
inMesLoop$Label[1] = "FirstTime"
for (i in 2:length(inMesLoop)) {
currSharerID[i] = inMesLoop$SharerID[i]
currReceiverID[i] = inMesLoop$receiver[i]
currTime[i] = as.Date(inMesLoop$Time[i])
acc = inMesLoop[0]
for (j in 1:length(currSharerID)) {
validRow = inMesLoop[which(identical(inMesLoop$SharerID[j],inMesLoop$SharerID[i])&
identical(inMesLoop$receiver[j],inMesLoop$receiver[i]))]
if (length(rownames(validRow)) > 0) {
rbind(acc,validRow,fill = TRUE)
}
}
# checks case if next UserID and ReceiverID are the same as before
#[i]%in%currSharerID
if (identical(currSharerID[i],currSharerID[i-1])&identical(currReceiverID[i],currReceiverID[i-1])) {
if (difftime(currTime[i],currTime[i-1]) > 10080) {
inMesLoop$Label = "FirstTime"
}
}
}
View(inMesLoop)
inMesLoop$SharerID = as.character(inMesLoop$SharerID)
inMesLoop$ReceiverID = as.character(inMesLoop$ReceiverID)
inMesLoop$Time = as.Date(inMesLoop$Time)
currSharerID = c(inMesLoop$SharerID[1])
currReceiverID = c(inMesLoop$receiver[1])
currTime = c(as.Date(inMesLoop$Time[1]))
inMesLoop$Label[1] = "FirstTime"
for (i in 2:length(inMesLoop)) {
currSharerID[i] = inMesLoop$SharerID[i]
currReceiverID[i] = inMesLoop$ReceiverID[i]
currTime[i] = as.Date(inMesLoop$Time[i])
acc = inMesLoop[0]
for (j in 1:length(currSharerID)) {
validRow = inMesLoop[which(identical(inMesLoop$SharerID[j],inMesLoop$SharerID[i])&
identical(inMesLoop$ReceiverID[j],inMesLoop$ReceiverID[i]))]
if (length(rownames(validRow)) > 0) {
rbind(acc,validRow,fill = TRUE)
}
}
# checks case if next UserID and ReceiverID are the same as before
#How do we check if the (sharerID,ReceiverID) pair has already been seen,
#and how do we get that row number?
if (identical(currSharerID[i],currSharerID[i-1])&identical(currReceiverID[i],currReceiverID[i-1])) {
if (difftime(currTime[i],currTime[i-1]) > 10080) {
inMesLoop$Label = "FirstTime"
}
}
}
View(inMesLoop)
View(acc)
shiny::runApp('Desktop/Summer_Research/WebNotes_Data')
shiny::runApp('Desktop/Summer_Research/WebNotes_Data')
shiny::runApp('Desktop/Summer_Research/WebNotes_Data')
shiny::runApp('Desktop/Summer_Research/WebNotes_Data')
shiny::runApp('Desktop/Summer_Research/WebNotes_Data')
shiny::runApp('Desktop/Summer_Research/WebNotes_Data')
shiny::runApp('Desktop/Summer_Research/WebNotes_Data')
source('~/Desktop/Research/networkD3Examples.R')
shiny::runApp('Desktop/Research/MatrixApp3')
shiny::runApp('Desktop/Research/networkD3Apps')
shiny::runApp('Desktop/Research/networkD3Apps')
shiny::runApp('Desktop/Research/networkD3Apps')
shiny::runApp('Desktop/Research/WebNotes_Data')
shiny::runApp('Desktop/Research/WebNotes_Data')
inMesGraph
shiny::runApp('Desktop/Research/WebNotes_Data')
source('~/Desktop/Research/WebNotes_Data/webNotes2.R')
source('~/Desktop/Research/WebNotes_Data/webNotes2.R')
inBoundMes
nMes
inMes
head(inMesDayCount)
min(inMesDayCount$N)
mean(inMesDayCount$N)
median(inMesDayCount$N)
max(inMesDayCount$N)
inMesWeekCount
min(inMesWeekCount$N)
mean(inMesWeekCount$N)
med(inMesWeekCount$N)
median(inMesWeekCount$N)
max(inMesWeekCount$N)
countDay
min(countDay$N)
mean(countDay$N)
median(countDay$N)
max(countDay$N)
min(countWeek$N)
mean(countWeek$N)
median(countWeek$N)
max(countWeek$N)
head(Annotations)
head(AnnotationDayCount)
min(AnnotationDayCount$N)
mean(AnnotationDayCount$N)
median(AnnotationDayCount$N)
max(AnnotationDayCount$N)
min(AnnotationWeekCount$N)
meann(AnnotationWeekCount$N)
mean(AnnotationWeekCount$N)
median(AnnotationWeekCount$N)
max(AnnotationWeekCount$N)
header = TRUE)
dat = read.csv("Users/nathanieldavenport/Desktop/Stuff/NFL2015games.csv",header = TRUE)
source('~/Desktop/Stuff/FootballData.R')
model = lm(dat$PtsW,dat$YdsW,TOW)
source('~/Desktop/Stuff/FootballData.R')
?lm
source('~/Desktop/Stuff/FootballData.R')
source('~/Desktop/Stuff/FootballData.R')
source('~/Desktop/Stuff/FootballData.R')
model = lm(dat$PtsW~dat$YdsW+dat$TOW)
model
source('~/Desktop/Stuff/FootballData.R')
summary(model2)
summary(model)
source('~/Desktop/Stuff/FootballData.R')
summary(model)
summary(model2)
summary(model3)
summary(model4)
source('~/Desktop/Stuff/FootballData.R')
summary(model5)
source('~/Desktop/Stuff/FootballData.R')
fakeData
source('~/Desktop/Research/ReunionProject/sociomatrix_script.R')
fakeData
matrx
sociomatrix
source('~/Desktop/Research/ReunionProject/sociomatrix_script.R')
fakeData
matrx
sociomatrix
source('~/Desktop/Baseball_Project/test1.R')
source('~/Desktop/Baseball_Project/test1.R')
source('~/Desktop/Baseball_Project/test1.R')
source('~/Desktop/Baseball_Project/baseballTest.R')
source('~/Desktop/Baseball_Project/test1.R')
source('~/Desktop/Baseball_Project/test1.R')
source('~/Desktop/Baseball_Project/test1.R')
source('~/Desktop/Baseball_Project/baseballTest.R')
source('~/Desktop/Baseball_Project/test1.R')
source('~/Desktop/Baseball_Project/baseballTest.R')
source('~/Desktop/Baseball_Project/baseballTest.R')
source('~/Desktop/Baseball_Project/baseballTest.R')
source('~/Desktop/Baseball_Project/test1.R')
source('~/Desktop/Baseball_Project/test1.R')
View(games)
source('~/Desktop/Baseball_Project/test1.R')
source('~/Desktop/Baseball_Project/test1.R')
View(windEffects)
source('~/Desktop/Baseball_Project/test1.R')
View(windEffects)
View(windEffects)
source('~/Desktop/Baseball_Project/test1.R')
for (i in 1:8) {
direction <- as.data.frame(windEffects[which(windEffects$WindDirection == i),])
View(direction)
}
a = 1
for (i in 1:8) {}
for (i in 1:8) { a = a + 1}
a
View(direction)
for (i in 1:8) {
# create a data frame just for that direction
direction <- as.data.frame(windEffects[which(windEffects$WindDirection == i),])
# create the linear model
windModel <- lm(direction$TotalScore ~ direction$WindSpeed)
print(summary(windModel))
}
View(windEffects)
source('~/Desktop/Baseball_Project/test1.R')
for (i in 1:8) {
# create a data frame just for that direction
direction <- as.data.frame(windEffects[which(windEffects$WindDirection == i),])
# create the linear model
windModel <- lm(direction$TotalScore ~ direction$WindSpeed)
print(summary(windModel))
}
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/bettingOdds.R')
print("asdfa" + 4)
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/bettingOdds.R')
convertOddsToPercentage(-110)
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/bettingOdds.R')
View(teamIDs)
v = c(1,2,3)
v[] = 5
v
v
v[]
v = c(1,2,3)
v
v[4] 5
v[4] = 5
v
v[6] = 5
v
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/bettingOdds.R')
dbDisconnect(con)
source('~/Desktop/baseballproject/bettingOdds.R')
dbDisconnect(con)
source('~/Desktop/baseballproject/bettingOdds.R')
teamName = "WAS"
paste("SELECT HOME_ODDS FROM betting_data
INNER JOIN games ON games.GAME_ID = betting_data.GAME_ID
WHERE games.GAME_ID LIKE '%",teamName,"%'")
?paste
source('~/Desktop/baseballproject/bettingOdds.R')
dbDisconnect(con)
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/bettingOdds.R')
View(actualWinPct)
View(homeBreakeven)
View(teamIDs)
View(homeOdds)
source('~/Desktop/baseballproject/bettingOdds.R')
View(losses)
View(wins)
View(losses)
View(teamIDs)
View(awayOdds)
View(homeOdds)
View(awayOdds)
View(actualWinPct)
View(homeBreakeven)
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/bettingOdds.R')
warnings()
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/bettingOdds.R')
View(homeBreakeven)
source('~/Desktop/baseballproject/bettingOdds.R')
View(wins)
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/bettingOdds.R')
View(homeBreakeven)
source('~/Desktop/baseballproject/bettingOdds.R')
View(homeBreakeven)
source('~/Desktop/baseballproject/bettingOdds.R')
View(homeBreakeven)
source('~/Desktop/baseballproject/bettingOdds.R')
View(homeBreakeven)
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/calculateProfit.R')
source('~/Desktop/baseballproject/calculateProfit.R')
source('~/Desktop/baseballproject/bettingOdds.R')
source('~/Desktop/baseballproject/calculateProfit.R')
source('~/Desktop/baseballproject/calculateProfit.R')
getwd()
source('~/Desktop/baseballproject/calculateProfit.R')
source('~/Desktop/baseballproject/calculateProfit.R')
source('~/Desktop/baseballproject/calculateProfit.R')
source('~/Desktop/baseballproject/calculateProfit.R')
source('~/Desktop/baseballproject/calculateProfit.R')
source('~/Desktop/baseballproject/calculateProfit.R')
source('~/Desktop/baseballproject/calculateProfit.R')
source('~/Desktop/baseballproject/calculateProfit.R')
source('~/Desktop/baseballproject/calculateProfit.R')
View(profits)
warnings()
source('~/Desktop/baseballproject/calculateProfit.R')
View(profits)
source('~/Desktop/baseballproject/calculateProfit.R')
source('~/Desktop/baseballproject/calculateProfit.R')
View(profits)
sum(profits$Profit)
